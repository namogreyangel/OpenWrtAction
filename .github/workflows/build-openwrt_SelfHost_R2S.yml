##
# Copyright (c) 2022-2023 SMALLPROGRAM <https://github.com/smallprogram/OpenWrtAction>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/smallprogram/OpenWrtAction
# Description: Build OpenWrt using GitHub Actions
#

name: Build-OpenWrt_SelfHost_R2S

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  # schedule:
  #   - cron: 0 */8 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds_config/custom.feeds.conf.default
  CONFIG_FILE: config/R2S.config
  DIY_P1_SH: diy_script/diy-part1.sh
  DIY_P2_SH: diy_script/diy-part2.sh
  COMMIT_LOG_NUM: 1
  RELEASE_TAG: R2S
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  SERVERCHAN_SCKEY: true 
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout
      uses: actions/checkout@main
  
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo githubaction | sudo -S -E apt-get -qq update
        echo githubaction | sudo -S -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        echo githubaction | sudo -S -E apt-get -qq autoremove --purge
        echo githubaction | sudo -S -E apt-get -qq clean
        echo githubaction | sudo -S timedatectl set-timezone "$TZ"
        echo githubaction | sudo -S mkdir -p /workdir
        echo githubaction | sudo -S chown $USER:$GROUPS /workdir
        export GIT_SSL_NO_VERIFY=1

    - name: Clone Or Update Source Code
      working-directory: /workdir
      run: |
        df -hT $PWD
        if [ ! -d "/workdir/$RELEASE_TAG" ]; then git clone $REPO_URL -b $REPO_BRANCH /workdir/$RELEASE_TAG;   else cd /workdir/$RELEASE_TAG; git stash; git stash drop; git pull; fi;
        ln -sf /workdir/$RELEASE_TAG ${{ github.workspace }}/$RELEASE_TAG
        rm -rf ${{ github.workspace }}/$RELEASE_TAG/bin

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF ${{ github.workspace }}/$RELEASE_TAG/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd ${{ github.workspace }}/$RELEASE_TAG
        ${{ github.workspace }}/$DIY_P1_SH

    - name: Update feeds
      run: cd ${{ github.workspace }}/$RELEASE_TAG && ./scripts/feeds update -a

    - name: Install feeds
      run: cd ${{ github.workspace }}/$RELEASE_TAG && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files ${{ github.workspace }}/$RELEASE_TAG/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE ${{ github.workspace }}/$RELEASE_TAG/.config
        chmod +x $DIY_P2_SH
        cd ${{ github.workspace }}/$RELEASE_TAG
        ${{ github.workspace }}/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        mkdir -p ${{ github.workspace }}/$RELEASE_TAG/dl
        cp -r ${{ github.workspace }}/library/* ${{ github.workspace }}/$RELEASE_TAG/dl
        cd ${{ github.workspace }}/$RELEASE_TAG
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd ${{ github.workspace }}/$RELEASE_TAG
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    # - name: Organize files
    #   id: organize
    #   if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
    #   run: |
    #     cd ${{ github.workspace }}/$RELEASE_TAG/bin/targets/*/*
    #     zip -q -r packages.zip packages
    #     rm -rf packages
    #     # for i in `ls`; do mv -f $i `echo "SelfHost_$(date +"%Y%m%d%H%M")_"$i`; done
    #     echo "FIRMWARE=$PWD" >> $GITHUB_ENV
    #     echo "::set-output name=status::success"

    # - name: Upload firmware directory
    #   uses: actions/upload-artifact@main
    #   if: steps.organize.outputs.status == 'success' && !cancelled()
    #   with:
    #     name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
    #     path: ${{ env.FIRMWARE }}

    # - name: Generate release tag
    #   id: tag
    #   if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    #   run: |
    #     echo "::set-output name=release_tag::$RELEASE_TAG-$(date +"%Y.%m.%d-%H%M")"
        
    #     echo "## Update content" >> release.txt

    #     echo "<details> <summary> Lean Openwrt Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
    #     git -C ${{ github.workspace }}/$RELEASE_TAG log -n $COMMIT_LOG_NUM >> release.txt

    #     echo "</details> <details> <summary> Lean Package Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
    #     git -C ${{ github.workspace }}/$RELEASE_TAG/feeds/packages log -n $COMMIT_LOG_NUM >> release.txt

    #     echo "</details> <details> <summary> Lean Luci Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
    #     git -C ${{ github.workspace }}/$RELEASE_TAG/feeds/luci log -n $COMMIT_LOG_NUM >> release.txt

    #     echo "</details> <details> <summary> Openwrt routing Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
    #     git -C ${{ github.workspace }}/$RELEASE_TAG/feeds/routing log -n $COMMIT_LOG_NUM >> release.txt

    #     echo "</details> <details> <summary> Openwrt telephony Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
    #     git -C ${{ github.workspace }}/$RELEASE_TAG/feeds/telephony log -n $COMMIT_LOG_NUM >> release.txt

    #     echo "</details> <details> <summary> SSRP Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
    #     git -C ${{ github.workspace }}/$RELEASE_TAG/feeds/helloworld log -n $COMMIT_LOG_NUM >> release.txt

    #     echo "</details> <details> <summary> Passwall Packages Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
    #     git -C ${{ github.workspace }}/$RELEASE_TAG/feeds/passwall_packages log -n $COMMIT_LOG_NUM >> release.txt

    #     echo "</details> <details> <summary> Passwall Luci Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
    #     git -C ${{ github.workspace }}/$RELEASE_TAG/feeds/passwall_luci log -n $COMMIT_LOG_NUM >> release.txt

    #     echo "</details> <details> <summary> Passwall2 Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
    #     git -C ${{ github.workspace }}/$RELEASE_TAG/feeds/passwall2 log -n $COMMIT_LOG_NUM >> release.txt

    #     # echo "</details> <details> <summary> DockerMan Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
    #     # git -C ${{ github.workspace }}/$RELEASE_TAG/package/lean/luci-app-dockerman log -n $COMMIT_LOG_NUM >> release.txt

    #     # echo "</details> <details> <summary> ThemeArgon Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
    #     # git -C ${{ github.workspace }}/$RELEASE_TAG/package/lean/luci-theme-argon log -n $COMMIT_LOG_NUM >> release.txt

    #     # echo "</details> <details> <summary> ArgonConfig Commit Top $COMMIT_LOG_NUM </summary>" >> release.txt
    #     # git -C ${{ github.workspace }}/$RELEASE_TAG/package/lean/luci-app-argon-config log -n $COMMIT_LOG_NUM >> release.txt

    #     touch release.txt
    #     [ $UPLOAD_COWTRANSFER = true ] && echo "ðŸ”— [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
    #     [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
    #     echo "::set-output name=status::success"

    # - name: Upload firmware to release
    #   uses: softprops/action-gh-release@v0.1.14
    #   if: steps.tag.outputs.status == 'success' && !cancelled()
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ steps.tag.outputs.release_tag }}
    #     body_path: release.txt
    #     files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: smallprogram/delete-older-releases@v0.2.1
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 15
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}       

